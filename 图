邻接矩阵不需要获取点的信息，第二维的下标即为目标点；邻接表需要获取点的信息，邻接表内存储的为点的位置；

//图的遍历-----------------------------------------------------------------------------------------------------------------------------------------------

//邻接矩阵 DFS---------------------------------------------------------------------------------------------------------------------------------------------
#include <cstdio>
using namespace std;

const int maxn=1000,INF=0x3f3f3f3f;

int n,G[maxn][maxn];
bool vis[maxn];

void DFS(int u,int depth){
    vis[u]=true;
    for(int i=0;i<n;i++){
        if(!vis[i]&&G[u][i]!=INF)
            DFS(i, depth+1);
    }
}

void DFSTraverse(){
    for(int u=0;u<n;u++){
        if(!vis[u])
            DFS(u, 1);
    }
}

//邻接表 DFS---------------------------------------------------------------------------------------------------------------------------------------------

#include <cstdio>
#include <vector>
using namespace std;

const int maxn=1000;

vector<int> Adj[maxn];
int n;
bool vis[maxn];

void DFS(int u,int depth){
    vis[u]=true;
    for(int i=0;i<Adj[u].size();i++){
        int v=Adj[u][i];
        if(!vis[v])
            DFS(v, depth+1);
    }
}

void DFSTraverse(){
    for(int u=0;u<n;u++){
        if(!vis[u])
            DFS(u,1);
    }
}
//邻接矩阵 BFS---------------------------------------------------------------------------------------------------------------------------------------------
#include <cstdio>
#include <queue>

using namespace std;

const int maxn=1000,INF=0x3f;

int n,G[maxn][maxn];
bool inq[maxn];

void BFS(int u){
    queue<int> q;
    q.push(u);
    inq[u]=true;
    while(!q.empty()){
        int u=q.front();
        q.pop();
        for(int i=0;i<n;i++){
            if(!inq[i]&&G[u][i]!=INF){
                q.push(i);
                inq[i]=true;
            }
        }
    }
}

void BFSTraverse(){
    for(int u=0;u<n;u++){
        if(!inq[u])
            BFS(u);
    }
}
//邻接表 BFS---------------------------------------------------------------------------------------------------------------------------------------------
#include <cstdio>
#include <queue>
#include <vector>

using namespace std;

const int maxn=1000;

int n;
vector<int> Adj[maxn];
bool inq[maxn];

void BFS(int u){
    queue<int> q;
    q.push(u);
    inq[u]=true;
    while(!q.empty()){
        int u=q.front();
        q.pop();
        for(int i=0;i<Adj[u].size();i++){
            int v=Adj[u][i];
            if(!inq[v]){
                q.push(v);
                inq[v]=true;
            }
        }
    }
}

void BFSTraverse(){
    for(int u=0;u<n;u++)
        if(!inq[u])
            BFS(u);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
//拓扑排序-----------------------------------------------------------------------------------------------------------------------------------------------

#include <vector>
#include <cstdio>
#include <queue>
using namespace std;

const int maxn=1000;

vector<int> G[maxn];
int n,m,inDegree[maxn];

bool topologicalSort(){
    int num=0;
    queue<int> q;
    for(int i=0;i<n;i++){
        if(inDegree[i]==0)
            q.push(i);
    }
    while(!q.empty()){
        int u=q.front();
        q.pop();
        for(int i=0;i<G[u].size();i++){
            int v=G[u][i];
            inDegree[v]--;
            if(inDegree[v]==0)
                q.push(v);
        }
        G[u].clear();
        num++;
    }
    if(num==n)return true;
    else return false;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------------------------------------
