//二分模版大致一样，主要的是对具体问题mid的判定;注意位运算的使用，否则会TLE
#include<cstdio>

int BinarySearch(int A[],int left,int right,int x){
    int mid;
    while(left<right){
        mid=left+(right-left>>1);
        if(A[mid]==x)
            return x;
        else if(A[mid]>x)
            right=mid-1;
        else
            left=mid+1;
    }
    return -1;
}

//找到第一个>=x的元素的位置
int lower_bound(int A[],int left,int right,int x){
    int mid;
    while(left<right){
        mid=left+(right-left>>1);
        if(A[mid]>=x)
            right=mid;
        else
            left=mid+1;
    }
    return left;
}

//找到第一个>x的元素的位置
int upper_bound(int A[],int left,int right,int x){
    int mid;
    while(left<right){
        mid=left+(right-left>>1);
        if(A[mid]>x)
            right=mid;
        else
            left=mid+1;
    }
    return left;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
//leetcode 35:

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int n = nums.size();
        int left = 0, right = n - 1, ans = n;//ans 初值设置为数组长度可以省略边界条件的判断
        while (left <= right) {
            int mid = ((right - left) >> 1) + left;
            if (target <= nums[mid]) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return ans;
    }
};

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int len=nums.size(),mid,left=0,right=len-1;
        while(left<right){
            mid=left+(right-left>>1);
            if(nums[mid]>=target)
                right=mid;
            else
                left=mid+1;
        }
        if(target>nums[left])
            left++;
        return left;
    }
};
------------------------------------------------------------------------------------------------------------------------------------------------------
//求近似值、求零点、极限----------------------------------------------------------------------------------------------------------------------------------

const double eps=1e-5;
double f(double x){
    return x*x;
}

double calSqrt(){
    double left=1,right=2,mid;
    while(right-left>eps){
        mid=(left+right)/2;
        if(f(mid)>2)
            right=mid;
        else
            left=mid;
    }
    return left;
}

double solve(double L,double R){
    double left=L,right=R,mid;
    while(right-left>eps){
        mid=(left+right)/2;
        if(f(mid)>0)
            right=mid;
        else
            left=mid;
    }
    return mid;
    }
------------------------------------------------------------------------------------------------------------------------------------------------------
