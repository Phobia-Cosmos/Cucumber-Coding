//------------------------------------------------------------------------------------------------------------------------------------------
void Merge(int A[],int L1,int R1,int L2,int R2){
    int temp[maxn],i=L1,j=L2,index=0;
    while(i<R1&&j<R2){
        if(A[i]<=A[j])
            temp[index++]=A[i++];
        else
            temp[index++]=A[j++];
    }
    while(i<R1)temp[index++]=A[i++];
    while(j<R2)temp[index++]=A[j++];
    for(i=0;i<index;i++)
        A[L1+i]=temp[i];
}

//递归写法：分到最小的区间在开始merge
void MergeSort(int A[],int left,int right){
    if(left<right){
        int mid=((right-left)>>1)+left;
        MergeSort(A, left, mid);
        MergeSort(A, mid+1, right);
        //divide ntil the minimum
        Merge(A, left, mid, mid+1, right);
    }
}

//迭代算法：步长为2开始递增，内层循环对每小组内容排序，找到右端点和区间长度的最小值作为merge的右端点
void MergeSort2(int A[],int n){
    for(int step=2;step<=n;step<<=1)
        for(int i=1;i<=n;i+=step){
            int mid=i+step-1;
            if(mid+1<=n)
                Merge(A, i, mid, mid+1, fmin(i+step-1,n));
        }
}
//QucikSort---------------------------------------------------------------------------------------------------------------------------------------------

#include<ctime>
#include<cmath>
#include <cstdlib>
#include <algorithm>

using namespace std;

int Partition(int A[],int left,int right){
    int temp=A[left];
    while(left<right){
        while(A[right]>temp&&left<right)right--;
        A[left]=A[right];
        while(A[left]<=temp&&left<right)left++;
        A[right]=A[left];
    }
            A[left]=temp;
    return left;
}

void QuickSort(int A[],int left,int right){
    if(left<right){
        int pos=Partition(A, left, right);
        QuickSort(A, left, pos-1);
        QuickSort(A, pos+1, right);
        //pos位置不进行排序，对其左右子区间进行排序，相当于pos为有序位置
    }
}

//优化版快排
int RandPartition(int A[],int left,int right){
    int p=(round(1.0*rand()/RAND_MAX*(right-left)+left));
    swap(A[p],A[left]);
    int temp=A[left];
    while(left<right){
        while(A[right]>temp&&left<right)right--;
        A[left]=A[right];
        while(A[left]<=temp&&left<right)left++;
        A[right]=A[left];
    }
            A[left]=temp;
    return left;
}

//随机选择算法O(n)；返回值根据题目确定;解决第K大问题
int RandSelect(int A[],int left,int right,int K){
    if(left==right) return A[left];
    int p=RandPartition(A, left, right);
    int M=p-left+1;//第几个数
    if(K==M) return A[p];
    if(K<M)
        return RandSelect(A, left, p-1, K);         //选出来的第p个数不参与递归
    else
        return RandSelect(A, p+1, right, K-M);
}

int main(void){
    srand((unsigned)time(NULL));
    //调用函数
}

