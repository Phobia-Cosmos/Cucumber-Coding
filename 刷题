//斐波那契数列
------------------------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <cstring>

const int maxn=(int)1e4+7;
int dp[maxn];
int res[2][2],tmp[2][2]={{1,0},{0,1}};

//递归写法（记忆化搜索）
int F(int n){
    if(n==1||n==2)return 1;
    if(dp[n]!=-1)return dp[n];
    else{
        dp[n]=F(n-1)+F(n-2);
        dp[n]%=10007;
        return dp[n];
    }
}

int main(void){
    int n;
    scanf("%d",&n);
//递推写法
//    int f1=1,f2=1;
//    for(int i=3;i<=n;i++){
//        f2=f1+f2;
//        f1=f2-f1;
//        f2%=10007;
//    }
    memset(dp, -1, sizeof(dp));
    printf("%d\n",F(n));
    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------------------------
//矩阵快速幂
#include <vector>
#include <iostream>
using namespace std;

const int MOD = 1000000007;

vector<vector<long> > Multiply(vector<vector<long> >a,vector<vector<long> >b){
    vector<vector<long> > res={{0,0},{0,0}};
    for(int i=0;i<a.size();i++)
        for(int j=0;j<b[0].size();j++)
            for(int k=0;k<b.size();k++){
                res[i][j]+=a[i][k]*b[k][j];
                res[i][j]%=MOD;
            }
    return res;
}

vector<vector<long> > MatrixPower(vector<vector<long> > base,int expo){
    vector<vector<long> > ret={{1,0},{0,1}};
    for(;expo;expo>>=1){
        if(expo&1)
            ret=Multiply(ret,base);
        base=Multiply(base,base);
    }
    return ret;
}

int F(int n){
    if(n<2)return n;
    vector<vector<long> > base={{0,1},{1,1}};
    vector<vector<long> > res=MatrixPower(base,n-1);
    return (int)res[1][1];
}
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
//AcWing 1097 池塘计数 FloodFill模型

#include <cstring>
#include <iostream>
#include <algorithm>

#define x first
#define y second

using namespace std;

typedef pair<int, int> PII;

const int N = 1010, M = N * N;

int n, m;
char g[N][N];
PII q[M];
bool st[N][N];

void bfs(int sx, int sy)
{
    int hh = 0, tt = 0;
    q[0] = {sx, sy};
    st[sx][sy] = true;

    while (hh <= tt)
    {
        PII t = q[hh ++ ];

        for (int i = t.x - 1; i <= t.x + 1; i ++ )
            for (int j = t.y - 1; j <= t.y + 1; j ++ )
            {
                if (i == t.x && j == t.y) continue;
                if (i < 0 || i >= n || j < 0 || j >= m) continue;
                if (g[i][j] == '.' || st[i][j]) continue;

                q[ ++ tt] = {i, j};
                st[i][j] = true;
            }
    }
}

int main()
{
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i ++ ) scanf("%s", g[i]);

    int cnt = 0;
    for (int i = 0; i < n; i ++ )
        for (int j = 0; j < m; j ++ )
            if (g[i][j] == 'W' && !st[i][j])
            {
                bfs(i, j);
                cnt ++ ;
            }

    printf("%d\n", cnt);

    return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
统计有序矩阵中负数（1351）
//倒序枚举
class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int cnt=0;
        for(int i=grid.size()-1;i>=0;i--)
            for(int j=grid[0].size()-1;j>=0;j--){
                if(grid[i][j]<0)
                    cnt++;
                else 
                    break;
            }
        return cnt;
    }
};

//每一行的数都是有序的，所以我们通过二分查找可以找到每一行中从前往后的第一个负数，那么这个位置之后到这一行的末尾里所有的数必然是负数了，可以直接统计。
class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int num=0;
        for (auto x:grid){
            int l=0,r=(int)x.size()-1,pos=-1;
            while (l<=r){
                int mid=l+((r-l)>>1);
                if (x[mid]<0){
                    pos=mid;
                    r=mid-1;
                }
                else l=mid+1;
            }
            if (~pos) num+=(int)x.size()-pos;// pos=-1表示这一行全是>=0的数，不能统计
        }
        return num;
    }
};
//每行每列均非递增，这说明了一个更重要的性质：每一行从前往后第一个负数的位置是不断递减的

//倒序遍历
class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int num=0,m=(int)grid[0].size(),pos=(int)grid[0].size()-1;
        for (auto x:grid){
            int i;
            for (i=pos;i>=0;--i){
                if (x[i]>=0){
                    if (i+1<m){
                        pos=i+1;
                        num+=m-pos;
                    }
                    break;
                }
            }
            if (i==-1){
                num+=m;
                pos=-1;
            }
        }
        return num;
    }
}；
------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------
